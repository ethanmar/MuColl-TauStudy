from pyLCIO import IOIMPL, EVENT, UTIL
from ROOT import TH1F, TFile, TCanvas
import math
from argparse import ArgumentParser
from array import array
import os
import fnmatch
import numpy as np

from tau_mc_link import getLinkedMCTau, getVisibleProperties, getDecayMode, getNRecoQPis

# Command line arguments
parser = ArgumentParser()

# Input file
parser.add_argument('--inputFile', type=str, default='reco_output.slcio')

# Output file
parser.add_argument('--outputFile', type=str, default='pi_ana.root')

args = parser.parse_args()

# Initialize histograms
hists = []

hPiMaxConeTrue = TH1F('true_pi_max_angle', 'Maximum Angle Between True #pi^{#pm}s', 50, 0, 0.25)
hPiMaxConeTrue.GetXaxis().SetTitle('#theta_{max} [rad]')
hists.append(hPiMaxConeTrue)

hPiMaxConeReco = TH1F('reco_pi_max_angle', 'Maximum Angle Between Reconstructed #pi^{#pm}s', 50, 0, 0.25)
hPiMaxConeReco.GetXaxis().SetTitle('#theta_{max} [rad]')
hists.append(hPiMaxConeReco)

# Detach histograms from file/directory
for hist in hists:
    hist.SetDirectory(0)

# Check if input file is a directory or a single file    
to_process = []

if os.path.isdir(args.inputFile):
    for r, d, f in os.walk(args.inputFile):
        for file in f:
            to_process.append(os.path.join(r, file))
else:
    to_process.append(args.inputFile)

# Find max angle between three charged pions
max_angle_true = 0
max_angle_reco = 0

# Open input file(s)
for file in to_process:
    reader = IOIMPL.LCFactory.getInstance().createLCReader()
    reader.open(file)

    # Loop through events
    for ievt, event in enumerate(reader):

        # Get collections
        pfos = event.getCollection('PandoraPFOs')
        mcParticles = event.getCollection('MCParticle')

        # Loop through MC particles
        for mcParticle in mcParticles:

            # Tag MC taus
            pdg = abs(mcParticle.getPDG())
            if pdg == 15:

                # Get tau decay mode
                decayMode = getDecayMode(mcParticle)

                if decayMode == 4:
                    pis = []
                    for pfo in pfos:
                        if abs(pfo.getType()) == 211:
                            pis.append(pfo)
                    if len(pis) > 1:
                        pi_max_angle_reco = 0
                        for i in range(len(pis)-1):
                            for j in range(i+1, len(pis)):
                                px_i = pis[i].getMomentum()[0]
                                py_i = pis[i].getMomentum()[1]
                                pz_i = pis[i].getMomentum()[2]
                                px_j = pis[j].getMomentum()[0]
                                py_j = pis[j].getMomentum()[1]
                                pz_j = pis[j].getMomentum()[2]
                                angle = math.acos((px_i*px_j + py_i*py_j + pz_i*pz_j)/(math.sqrt(px_i**2 + py_i**2 + pz_i**2)*math.sqrt(px_j**2 + py_j**2 + pz_j**2)))
                                if angle > max_angle_reco:
                                    max_angle_reco = angle
                                if angle > pi_max_angle_reco:
                                    pi_max_angle_reco = angle

                        hPiMaxConeReco.Fill(pi_max_angle_reco)

                    pis_true = []
                    daughters = mcParticle.getDaughters()
                    for daughter in daughters:
                        if abs(daughter.getPDG()) == 211:
                            pis_true.append(daughter)
                    if len(pis_true) > 1:
                        pi_max_angle_true = 0
                        for i in range(len(pis_true)-1):
                            for j in range(i+1, len(pis_true)):
                                px_i = pis_true[i].getMomentum()[0]
                                py_i = pis_true[i].getMomentum()[1]
                                pz_i = pis_true[i].getMomentum()[2]
                                px_j = pis_true[j].getMomentum()[0]
                                py_j = pis_true[j].getMomentum()[1]
                                pz_j = pis_true[j].getMomentum()[2]
                                angle = math.acos((px_i*px_j + py_i*py_j + pz_i*pz_j)/(math.sqrt(px_i**2 + py_i**2 + pz_i**2)*math.sqrt(px_j**2 + py_j**2 + pz_j**2)))
                                if angle > max_angle_true:
                                    max_angle_true = angle
                                if angle > pi_max_angle_true:
                                    pi_max_angle_true = angle

                        hPiMaxConeTrue.Fill(pi_max_angle_true)
                                
    # Close file
    reader.close()

print(f'Reco Max Angle: {max_angle_reco} rad')
print(f'True Max Angle: {max_angle_true} rad')
    
# Write to output file
output_file = TFile(args.outputFile, 'RECREATE')
for hist in hists:
    hist.Write()
output_file.Close()

# Draw hists and save as PNG
for hist in hists:
    filename = hist.GetName() + '.png'
    canvas = TCanvas()
    hist.Draw()
    canvas.SaveAs(filename)
